// Initialize Firebase
var config = {
    apiKey: "AIzaSyDWMxEvXQ_dSBfXZ98kwcu3pVkS2pf-Fco",
    authDomain: "ranking-323a9.firebaseapp.com",
    databaseURL: "https://ranking-323a9.firebaseio.com",
    storageBucket: "ranking-323a9.appspot.com",
    messagingSenderId: "358238196288"
};
firebase.initializeApp(config);


var app = angular.module("app", ['firebase','ngMaterial']);
app.controller("myCtrl", ['$scope', '$firebaseArray', '$mdToast', '$timeout', function ($scope, $firebaseArray, $mdToast, $timeout) {

    function compare(a, b) {
        if (a.id < b.id)
            return -1;
        if (a.id > b.id)
            return 1;
        return 0;
    }

    $scope.fillItem = function (itemToScan, index) {
        var itemRef = firebase.database().ref().child("userScaned/"+itemToScan.$id);
        itemRef.once('value', function(snapshot) {
            var item = snapshot.val();
            if(item){
                $scope.$apply(function () {
                    itemToScan.scaned = true;
                });

                for (var y in item.likedPages) {
                    $scope.rankingPages.push(item.likedPages[y]);

                    if (index == $scope.userToScan.length - 1 && y == item.likedPages.length - 1) {

                        $scope.rankingPages.sort(compare);

                        var array_elements = $scope.rankingPages;

                        var lastItem = {id: null};
                        var cnt = 0;

                        for (var i = 0; i < array_elements.length; i++) {

                            //Nếu item thứ 2 giống item thứ 1 thì số lượng item tăng lên 1, và tiếp tục kiểm tra item thứ 3 với item 1
                            if (array_elements[i].id == lastItem.id) {
                                cnt++;
                            } else {
                                //Nếu item sau ko bằng item trước, thì item trước đã kết thúc. Khi đó in ra số lượng của item trước
                                if (cnt > 0) {
                                    lastItem.count = cnt;
                                    $scope.$apply(function () {
                                        $scope.rankedPages.push(lastItem);
                                    });
                                }
                                //Khởi tạo item để so sánh
                                lastItem = array_elements[i];
                                cnt = 1;
                            }
                        }

                        if (cnt > 0) {
                            lastItem.count = cnt;
                            $scope.$apply(function () {
                                $scope.rankedPages.push(lastItem);
                            });
                        }
                    }
                }

            }
        });
    };

    //ranking pages
    $scope.ranking = function () {
        console.log('Ranking..');
        $scope.rankingPages = [];
        $scope.rankedPages = [];

        for(var x = 0; x < $scope.userToScan.length; x++){
            $scope.fillItem($scope.userToScan[x], x);
        }

    };

    //load user to scan
    $scope.loadUserToScan = function () {

        var userToScanRef = firebase.database().ref().child("userToScan");
        $scope.userToScan = $firebaseArray(userToScanRef);
        var timeout;
        userToScanRef.on('value', function(snapshot) {

            //debounce
            $timeout.cancel(timeout); //cancel the last timeout
            timeout = $timeout(function(){
                $scope.ranking();
            }, 2000);

        });
    };

    $scope.init = function () {
        $scope.loadUserToScan();
    };
    $scope.init();

    $scope.scanUser = function (ids) {
        chrome.tabs.getCurrent(function (tab) {
            var currentWindowId = tab.windowId;
            chrome.windows.getAll(function (windows) {
                if (windows.length == 1) {
                    chrome.windows.create({
                        url: 'https://www.facebook.com/search/' + ids[0] + '/pages-liked/intersect',
                        focused: false
                    }, function (window) {

                        chrome.windows.update(1, {focused: true}, function (callback){
                        });

                        if(ids.length > 1){
                            for(var i = 1; i < $scope.selected.length; i++){
                                chrome.tabs.create({
                                    windowId: window.id,
                                    url: 'https://www.facebook.com/search/' + $scope.selected[i] + '/pages-liked/intersect',
                                    active: false
                                }, function () {
                                });

                            }
                        }
                    });

                } else {
                    for (var windowIndex in windows) {
                        if (currentWindowId !== windows[windowIndex].id) {
                            chrome.tabs.create({
                                windowId: windows[windowIndex].id,
                                url: 'https://www.facebook.com/search/' + ids[0] + '/pages-liked/intersect',
                                active: false
                            }, function () {
                            });

                            if(ids.length > 1){
                                for(var i = 0; i < $scope.selected.length; i++){
                                    chrome.tabs.create({
                                        windowId: windows[windowIndex].id,
                                        url: 'https://www.facebook.com/search/' + $scope.selected[i] + '/pages-liked/intersect',
                                        active: false
                                    }, function () {
                                    });
                                }
                            }

                        }
                    }
                }
            });
        });
    };


    $scope.waitingUserList = [];
    $scope.addUser = function () {

        if(!$scope.userLinks)
            return;

        $scope.linkArray = $scope.userLinks.replace(/\n/g, ',').replace(/ /g, '').split(',');

        for(var i in $scope.linkArray){

            if ($scope.linkArray[i].indexOf('https://www.facebook.com/') !== -1) {
                chrome.tabs.create({
                    url: $scope.linkArray[i],
                    active: false
                }, function () {

                });
                $scope.waitingUserList.push($scope.linkArray[i].split('/')[3].split('?')[0]);
            }

        }


    };

    $scope.deleteUser = function (x) {

        var r = confirm("Are you sure to delete ?");
        if (r == true) {
            $scope.userToScan.$remove(x).then(function(ref) {
                $mdToast.show(
                    $mdToast.simple()
                        .textContent('Delete success!!!')
                        .hideDelay(2000)
                );
            });
        }
    };

    //Delete All
    $scope.deleteAll = function () {
        var r = confirm("Deleted all?");
        if (r == true) {
            $scope.selected.forEach(function (id) {
                var itemRef = firebase.database().ref().child("userToScan/" + id);
                itemRef.remove();
            });
            $mdToast.show(
                $mdToast.simple()
                    .textContent('Delete success!!!')
                    .hideDelay(2000)
            );
        }
    };
    
    //Selected items
    $scope.selected = [];
    $scope.toggle = function (item, list) {
        var idx = list.indexOf(item);
        if (idx > -1) {
            list.splice(idx, 1);
        }
        else {
            list.push(item);
        }
    };

    $scope.exists = function (item, list) {
        return list.indexOf(item) > -1;
    };

    $scope.isIndeterminate = function() {
        return ($scope.selected.length !== 0 &&
        $scope.selected.length !== $scope.userToScan.length);
    };

    $scope.isChecked = function() {
        return $scope.selected.length === $scope.userToScan.length;
    };

    $scope.toggleAll = function() {
        if ($scope.selected.length === $scope.userToScan.length) {
            $scope.selected = [];
        } else if ($scope.selected.length === 0 || $scope.selected.length > 0) {
            $scope.selected = $scope.userToScan.map(function (item) {
                return item.$id;
            });
        }
    };
    
    

    chrome.runtime.onMessage.addListener(
        function (request, sender, sendResponse) {

            //getUserId
            if (request.title == 'getMyId') {
                if ($scope.waitingUserList.indexOf(request.data.username) !== -1) {

                    var displayName = request.data.displayName;
                    var username = request.data.username;
                    var userId = request.data.userId;

                    firebase.database().ref().child('userToScan/' + userId).update({
                        displayName: displayName,
                        username: username
                    }, function (error) {
                        if (error) {
                            console.log("Data could not be saved." + error);
                        } else {
                            chrome.tabs.remove(sender.tab.id, function () {
                            });

                            $scope.$apply(function () {
                                $scope.userLinks = '';
                            });

                        }
                    });
                }

                sendResponse({title: 'getMyIdDone'});
            }

            //scan liked pages
            if (request.title == 'activeMe') {
                chrome.tabs.update(sender.tab.id, {active: true}, function () {
                });
                sendResponse({title: 'activeDone'});
            }

            var timeout;
            if (request.title == 'closeMe') {
                chrome.tabs.remove(sender.tab.id, function () {
                });
                sendResponse({title: 'closeDone'});

                //debounce
                $timeout.cancel(timeout); //cancel the last timeout
                timeout = $timeout(function(){
                    $scope.ranking();
                }, 2000);
            }

        });


}]);
