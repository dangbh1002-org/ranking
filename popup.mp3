
// Initialize Firebase
var config = {
    apiKey: "AIzaSyDWMxEvXQ_dSBfXZ98kwcu3pVkS2pf-Fco",
    authDomain: "ranking-323a9.firebaseapp.com",
    databaseURL: "https://ranking-323a9.firebaseio.com",
    storageBucket: "ranking-323a9.appspot.com",
    messagingSenderId: "358238196288"
};
firebase.initializeApp(config);


var app = angular.module("app", ['firebase', 'ngMaterial']);

app.filter('unique', function() {

    return function (arr, field) {
        var o = {}, i, l = arr.length, r = [];
        for(i=0; i<l;i+=1) {
            o[arr[i][field]] = arr[i];
        }
        for(i in o) {
            r.push(o[i]);
        }
        return r;
    };
});

app.controller("myCtrl", ['$scope', '$firebaseArray', '$mdToast', '$timeout', '$http', function ($scope, $firebaseArray, $mdToast, $timeout, $http) {

    $scope.createUser = function () {

        if(!$scope.user.isAdmin){
            return;
        }

        firebase.auth().createUserWithEmailAndPassword($scope.email, $scope.password).then(function (user) {

            firebase.database().ref().child('users/' + user.uid).update({
                email: $scope.email
            });

            user.updateProfile({
                displayName: $scope.displayName,
                photoURL: ""
            }).then(function () {
                // Update successful.
            }, function (error) {
                // An error happened.
            });

            user.sendEmailVerification().then(function () {
                console.log('Verification email sent.');

                firebase.auth().sendPasswordResetEmail(user.email).then(function () {
                    console.log('PasswordReset email sent.');
                }, function (error) {
                    // An error happened.
                });

            }, function (error) {
                // An error happened.
            });

        }).catch(function (error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;
            console.log(errorCode, errorMessage);
            // ...
        });
    };

    $scope.loadAccList = function () {

        $scope.accListRef = firebase.database().ref().child("users/");
        $scope.accList = $firebaseArray($scope.accListRef);

        $scope.accList.$loaded(function (users) {

            for(var x = 0; x < $scope.accList.length; x++){
                $scope.accList[x].serverToken = $scope.accList[x].token? $scope.accList[x].token.slice(0, 12):'';
                $scope.loadClientToken($scope.accList[x].$id, x)
            }
        })
    };

    $scope.loadClientToken = function (id, index) {
        $scope.accList[index].href = firebase.database().ref().child("data/"+ id + '/token');
        $scope.accList[index].href.once('value', function (token) {
            $scope.accList[index].clientToken = token.val()? token.val().slice(0, 12):'';
        })
    };

    $scope.resetPassword = function () {
        firebase.auth().sendPasswordResetEmail($scope.email).then(function () {
            $scope.$apply(function () {
                $scope.loginError = false;
                $scope.loginMessage = 'Reset password email sent.';
            });
        }, function (error) {
            $scope.$apply(function () {
                $scope.loginError = true;
                $scope.loginMessage = error.message;
            });
            // An error happened.
        });
    };

    $scope.signIn = function () {

        $scope.loading = true;

        firebase.auth().signInWithEmailAndPassword($scope.email, $scope.password).then(function (auth) {

            firebase.database().ref().child('users/' + auth.uid).update({token: $scope.token}).catch(function (err) {
                // console.log(err);
            });
            firebase.database().ref().child('data/' + auth.uid).update({token: $scope.token}).catch(function (err) {
                // console.log(err);
            });

        }).catch(function (error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;

            $scope.$apply(function () {
                $scope.loginError = true;
                $scope.loginMessage = error.message;
            });

            // ...
        });
    };

    $scope.signOut = function () {

        firebase.auth().signOut().then(function () {
            // Sign-out successful.
        }, function (error) {
            // An error happened.
        });
    };

    $scope.addUser = function () {

        if (!$scope.userLinks)
            return;


        $scope.linkArray = $scope.userLinks.replace(/\n/g, ',').replace(/ /g, '').split(',');

        for (var i in $scope.linkArray) {

            if ($scope.linkArray[i].indexOf('profile.php?id=') !== -1) {
                chrome.tabs.create({
                    url: 'https://m.facebook.com/profile.php?id='+ $scope.linkArray[i].split('profile.php?id=')[1].split('&')[0],
                    active: false
                }, function () {

                });
                $scope.searchingUserList.push($scope.linkArray[i].split('profile.php?id=')[1].split('&')[0]);
                continue;
            }

            if ($scope.linkArray[i].indexOf('facebook.com/') !== -1) {
                chrome.tabs.create({
                    url: 'https://m.facebook.com/'+ $scope.linkArray[i].split('/')[3].split('?')[0],
                    active: false
                }, function () {

                });
                $scope.searchingUserList.push($scope.linkArray[i].split('facebook.com/')[1].split('?')[0]);
            }

        }

    };

    $scope.deleteUser = function (x) {

        var r = confirm("Are you sure to delete ?");
        if (r == true) {
            if (x.likedPages && x.likedPages.length) {
                $scope.letRanking = true;
            } else {
                $scope.letRanking = false;
            }

            $scope.userToScan.$remove(x).then(function (ref) {
                $mdToast.show(
                    $mdToast.simple()
                        .textContent('Delete success!!!')
                        .hideDelay(2000)
                );
            });
        }
    };

    //Delete All
    $scope.deleteAll = function () {
        var r = confirm("Deleted all?");
        if (r == true) {
            
            $scope.selected.forEach(function (item) {
                var itemRef = firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + item.$id);
                itemRef.remove();
            });
            $mdToast.show(
                $mdToast.simple()
                    .textContent('Delete success!!!')
                    .hideDelay(2000)
            );
        }
    };

    //load user to scan
    $scope.loadUserToScan = function () {

        $scope.userToScanRef = firebase.database().ref().child("data/" + $scope.auth.uid + "/userToScan/");
        $scope.userToScan = $firebaseArray($scope.userToScanRef);

        $scope.letRanking = true;
        var timeout;
        $scope.userToScanRef.on('value', function (snapshot) {

            if ($scope.letRanking) {
                //debounce
                $timeout.cancel(timeout); //cancel the last timeout
                timeout = $timeout(function () {
                    $scope.ranking();
                }, 2000);
            }

        });
    };

    $scope.scanUser = function (items, scaned) {

        if(scaned == false){

            function filterScaned() {
                for(var i = 0; i < items.length; i++){
                    if(items[i].scaned == true){
                        items.splice(i, 1);
                        filterScaned();
                        break;
                    }
                }
            }
            filterScaned();

            if(!items.length){
                return
            }
        }


        chrome.tabs.getCurrent(function (tab) {
            var currentWindowId = tab.windowId;
            chrome.windows.getAll(function (windows) {
                if (windows.length == 1) {
                    chrome.windows.create({
                        url: 'https://facebook.com/search/' + items[0].$id + '/pages-liked/intersect',
                        focused: false
                    }, function (window) {

                        chrome.windows.update(1, {focused: true}, function (callback) {
                        });

                        if (items.length > 1) {
                            for (var i = 1; i < $scope.selected.length; i++) {

                                if (scaned == false)

                                    chrome.tabs.create({
                                        windowId: window.id,
                                        url: 'https://facebook.com/search/' + $scope.selected[i].$id + '/pages-liked/intersect',
                                        active: false
                                    }, function () {
                                    });

                            }
                        }
                    });

                } else {
                    for (var windowIndex in windows) {
                        if (currentWindowId !== windows[windowIndex].id) {
                            chrome.tabs.create({
                                windowId: windows[windowIndex].id,
                                url: 'https://facebook.com/search/' + items[0].$id + '/pages-liked/intersect',
                                active: false
                            }, function () {
                            });

                            if (items.length > 1) {
                                for (var i = 0; i < $scope.selected.length; i++) {
                                    chrome.tabs.create({
                                        windowId: windows[windowIndex].id,
                                        url: 'https://facebook.com/search/' + $scope.selected[i].$id + '/pages-liked/intersect',
                                        active: false
                                    }, function () {
                                    });
                                }
                            }

                        }
                    }
                }
            });
        });
    };

    //ranking pages
    $scope.ranking = function () {
        $scope.ranked = [];
        for (var x = 0; x < $scope.userToScan.length; x++) {
            $scope.ranked = $scope.userToScan[x].likedPages? $scope.ranked.concat($scope.userToScan[x].likedPages):$scope.ranked;

        }

        if($scope.ranked.length && !$scope.tabled){
            $scope.tabled = true;
            setTimeout(function () {

                $('#ranked').DataTable({
                    pagingType: "full_numbers",
                    buttons: [
                        { extend: 'csv', className: 'btn purple btn-outline', filename: 'Ranked'},
                        { extend: 'excel', className: 'btn yellow btn-outline', filename: 'Ranked'},
                        { extend: 'pdf', className: 'btn red btn-outline', filename: 'Ranked'}
                    ],
                    "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>"
                });
            }, 100);
        }
        $scope.loading = false;

    };

    $scope.getCount = function(i) {
        var iCount = iCount || 0;
        for (var j = 0; j < $scope.ranked.length; j++) {
            if ($scope.ranked[j].id == i) {
                iCount++;
            }
        }
        return iCount;
    };

    //Selected items
    $scope.toggle = function (item, list) {

        for(var i = 0; i < list.length; i++){
            if(list[i].$id == item.$id){
                return list.splice(i, 1);
            }
        }

        list.push({$id: item.$id, scaned: item.scaned});
    };
    $scope.exists = function (item, list) {

        for(var i = 0; i < list.length; i++){
            if(list[i].$id == item.$id){
                return true;
            }
        }

        return false;
    };
    $scope.isIndeterminate = function () {
        return ($scope.selected.length !== 0 &&
        $scope.selected.length !== $scope.userToScan.length);
    };
    $scope.isChecked = function () {
        return $scope.selected.length === $scope.userToScan.length;
    };
    $scope.toggleAll = function () {
        if ($scope.selected.length === $scope.userToScan.length) {
            $scope.selected = [];
        } else if ($scope.selected.length === 0 || $scope.selected.length > 0) {
            $scope.selected = $scope.userToScan.map(function (item) {
                return {$id: item.$id, scaned: item.scaned};
            });
        }
    };

    $scope.init = function () {

        const messaging = firebase.messaging();
        messaging.requestPermission()
            .then(function () {
                return messaging.getToken();
                // TODO(developer): Retrieve an Instance ID token for use with FCM.
                // ...
            })
            .then(function (token) {
                // console.log(token);
                $scope.token = token;
            })
            .catch(function (err) {
                console.log('Unable to get permission to notify.', err);
            });

        function compare(a, b) {
            if (a.id < b.id)
                return -1;
            if (a.id > b.id)
                return 1;
            return 0;
        }

        chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {

            //getUserId
            if (request.title == 'getMyId') {
                if ($scope.searchingUserList.indexOf(request.data.searching) !== -1) {

                    $scope.letRanking = false;

                    firebase.database().ref().child('data/' + $scope.auth.uid).update({
                        token: $scope.token
                    });

                    firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + request.data.userId).update({
                        displayName: request.data.displayName,
                        username: request.data.username
                    }, function (error) {
                        if (error) {
                            console.log("Data could not be saved." + error);
                        } else {
                            chrome.tabs.remove(sender.tab.id, function () {
                            });

                            $scope.$apply(function () {
                                $scope.userLinks = '';
                            });

                        }
                    });
                }

                sendResponse({title: 'getMyIdDone'});
            }


            //getUserId from right click
            if (request.title == 'getMyIdNow') {

                $scope.letRanking = false;

                firebase.database().ref().child('data/' + $scope.auth.uid).update({
                    token: $scope.token
                });

                firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + request.data.userId).update({
                    displayName: request.data.displayName,
                    username: request.data.username
                }, function (error) {
                    if (error) {
                        console.log("Data could not be saved." + error);
                    } else {

                        $scope.$apply(function () {
                            $scope.userLinks = '';
                        });
                    }
                });

                sendResponse({title: 'getMyIdNowDone'});
            }


            //scan liked pages
            if (request.title == 'activeMe') {
                chrome.tabs.update(sender.tab.id, {active: true}, function () {
                });
                sendResponse({title: 'activeDone'});
            }

            var timeout;
            //scan liked pages
            if (request.title == 'pagesScaned') {

                $scope.letRanking = true;

                firebase.database().ref().child('data/' + $scope.auth.uid).update({
                    token: $scope.token
                });

                firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + request.data.userId).update({likedPages: request.data.likedPages}, function (error) {
                    if (error) {
                        console.log("Data could not be saved." + error);
                    } else {
                        chrome.tabs.remove(sender.tab.id, function () {
                        });
                    }
                });

            }

        });

        firebase.auth().onAuthStateChanged(function (auth) {
            $scope.auth = [];

            $scope.$apply(function () {
                $scope.auth = auth;
            });

            $scope.userToScan = [];
            $scope.tabled = false;
            $("#ranked").DataTable().clear().destroy();

            $scope.ranked = [];
            if($scope.userToScanRef){
                $scope.userToScanRef.off();
            }

            $scope.accList = [];
            if($scope.accListRef){
                $scope.accListRef.off();
            }

            if (auth) {

                var userRef = firebase.database().ref().child('users/'+$scope.auth.uid);
                userRef.on('value', function (snapshot) {
                    $scope.user = snapshot.val();
                    if($scope.user.isAdmin){
                        $scope.loadAccList();
                    }
                });

                $scope.loadUserToScan();
            } else {
                $scope.user = [];
            }
        });

        $scope.loading = true;
        $scope.searchingUserList = [];
        $scope.selected = [];
        $scope.ranked = [];
        $scope.userToScan = [];
    };
    $scope.init();

}]);
