// Initialize Firebase
var config = {
    apiKey: "AIzaSyDWMxEvXQ_dSBfXZ98kwcu3pVkS2pf-Fco",
    authDomain: "ranking-323a9.firebaseapp.com",
    databaseURL: "https://ranking-323a9.firebaseio.com",
    storageBucket: "ranking-323a9.appspot.com",
    messagingSenderId: "358238196288"
};
firebase.initializeApp(config);


var app = angular.module("app", ['firebase', 'ngMaterial']);
app.controller("myCtrl", ['$scope', '$firebaseArray', '$mdToast', '$timeout', '$http', function ($scope, $firebaseArray, $mdToast, $timeout, $http) {

    const messaging = firebase.messaging();
    messaging.requestPermission()
        .then(function () {
            return messaging.getToken();
            // TODO(developer): Retrieve an Instance ID token for use with FCM.
            // ...
        })
        .then(function (token) {
            // console.log(token);
            $scope.token = token;
        })
        .catch(function (err) {
            console.log('Unable to get permission to notify.', err);
        });


    $scope.createUser = function () {

        firebase.auth().createUserWithEmailAndPassword($scope.email, $scope.password).then(function (user) {

            firebase.database().ref().child('users/' + user.uid).update({
                name: $scope.displayName,
                email: $scope.email
            });

            user.updateProfile({
                displayName: $scope.displayName,
                photoURL: "https://example.com/jane-q-user/profile.jpg"
            }).then(function () {
                // Update successful.
            }, function (error) {
                // An error happened.
            });

            user.sendEmailVerification().then(function () {
                console.log('Verification email sent.');

                firebase.auth().sendPasswordResetEmail(user.email).then(function () {
                    console.log('PasswordReset email sent.');
                }, function (error) {
                    // An error happened.
                });

            }, function (error) {
                // An error happened.
            });

        }).catch(function (error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;
            console.log(errorCode, errorMessage);
            // ...
        });
    };

    $scope.signOut = function () {
        $scope.userToScan = [];
        $scope.userToScanRef.off();

        firebase.auth().signOut().then(function () {
            // Sign-out successful.
        }, function (error) {
            // An error happened.
        });
    };


    $scope.displayName = 'Brian Dhang 2';
    $scope.email = 'dangbh1002@gmail.com';
    $scope.password = '12345678';
    $scope.signIn = function () {

        firebase.auth().signInWithEmailAndPassword($scope.email, $scope.password).then(function (user) {
            firebase.database().ref().child('users/' + user.uid).update({token: $scope.token}).catch(function (err) {
                // console.log(err);
            });
            firebase.database().ref().child('data/' + user.uid).update({token: $scope.token}).catch(function (err) {
                // console.log(err);
            });
        }).catch(function (error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;
            console.log(error);
            // ...
        });
    };

    $scope.updateProfile = function () {
        if ($scope.auth) {

            $scope.auth.updateProfile({
                displayName: $scope.displayName
            }).then(function () {
                console.log('Update successful.');
                // Update successful.
            }, function (error) {
                // An error happened.
            });
        }

    };

    $scope.auth = [];
    firebase.auth().onAuthStateChanged(function (user) {
        $scope.$apply(function () {
            $scope.auth = user;
        });

        if (user) {
            $scope.loadUserToScan();
        }
    });


    function compare(a, b) {
        if (a.id < b.id)
            return -1;
        if (a.id > b.id)
            return 1;
        return 0;
    }

    //ranking pages
    $scope.ranking = function () {
        console.log('Ranking..');
        $scope.rankingPages = [];
        $scope.rankedPages = [];

        for (var x = 0; x < $scope.userToScan.length; x++) {

            var item = $scope.userToScan[x];

            if (item.likedPages && item.likedPages.length) {
                $scope.$apply(function () {
                    item.scaned = true;
                });
            } else {
                item.likedPages = [];
            }

            for (var y = 0; y < item.likedPages.length; y++) {
                $scope.rankingPages.push(item.likedPages[y]);
            }

        }


        $scope.rankingPages.sort(compare);

        var array_elements = $scope.rankingPages;

        var lastItem = {id: null};
        var cnt = 0;

        for (var i = 0; i < array_elements.length; i++) {

            //Nếu item thứ 2 giống item thứ 1 thì số lượng item tăng lên 1, và tiếp tục kiểm tra item thứ 3 với item 1
            if (array_elements[i].id == lastItem.id) {
                cnt++;
            } else {
                //Nếu item sau ko bằng item trước, thì item trước đã kết thúc. Khi đó in ra số lượng của item trước
                if (cnt > 0) {
                    lastItem.count = cnt;
                    $scope.$apply(function () {
                        $scope.rankedPages.push(lastItem);
                    });
                }
                //Khởi tạo item để so sánh
                lastItem = array_elements[i];
                cnt = 1;
            }
        }

        if (cnt > 0) {
            lastItem.count = cnt;
            $scope.$apply(function () {
                $scope.rankedPages.push(lastItem);
            });
        }

        $('#rankedPages').DataTable({
            buttons: [
                'excelHtml5'
            ]
        });

    };


    //load user to scan
    $scope.loadUserToScan = function () {

        $scope.userToScanRef = firebase.database().ref().child("data/" + $scope.auth.uid + "/userToScan/");
        $scope.userToScan = $firebaseArray($scope.userToScanRef);

        $scope.letRanking = true;
        var timeout;
        $scope.userToScanRef.on('value', function (snapshot) {

            if ($scope.letRanking) {
                //debounce
                $timeout.cancel(timeout); //cancel the last timeout
                timeout = $timeout(function () {
                    $scope.ranking();
                }, 2000);
            }

        });
    };

    $scope.init = function () {
        $scope.userToScan = [];
    };
    $scope.init();

    $scope.scanUser = function (items, scaned) {

        if(scaned == false){

            function filterScaned() {
                for(var i = 0; i < items.length; i++){
                    if(items[i].scaned == true){
                        items.splice(i, 1);
                        filterScaned();
                        break;
                    }
                }
            }
            filterScaned();

            if(!items.length){
                return
            }
        }


        chrome.tabs.getCurrent(function (tab) {
            var currentWindowId = tab.windowId;
            chrome.windows.getAll(function (windows) {
                if (windows.length == 1) {
                    chrome.windows.create({
                        url: 'https://m.facebook.com/search/' + items[0].$id + '/pages-liked/intersect',
                        focused: false
                    }, function (window) {

                        chrome.windows.update(1, {focused: true}, function (callback) {
                        });

                        if (items.length > 1) {
                            for (var i = 1; i < $scope.selected.length; i++) {

                                if (scaned == false)

                                chrome.tabs.create({
                                    windowId: window.id,
                                    url: 'https://m.facebook.com/search/' + $scope.selected[i].$id + '/pages-liked/intersect',
                                    active: false
                                }, function () {
                                });

                            }
                        }
                    });

                } else {
                    for (var windowIndex in windows) {
                        if (currentWindowId !== windows[windowIndex].id) {
                            chrome.tabs.create({
                                windowId: windows[windowIndex].id,
                                url: 'https://m.facebook.com/search/' + items[0].$id + '/pages-liked/intersect',
                                active: false
                            }, function () {
                            });

                            if (items.length > 1) {
                                for (var i = 0; i < $scope.selected.length; i++) {
                                    chrome.tabs.create({
                                        windowId: windows[windowIndex].id,
                                        url: 'https://m.facebook.com/search/' + $scope.selected[i].$id + '/pages-liked/intersect',
                                        active: false
                                    }, function () {
                                    });
                                }
                            }

                        }
                    }
                }
            });
        });
    };


    $scope.searchingUserList = [];
    $scope.addUser = function () {

        if (!$scope.userLinks)
            return;

        $scope.linkArray = $scope.userLinks.replace(/\n/g, ',').replace(/ /g, '').split(',');

        for (var i in $scope.linkArray) {

            if ($scope.linkArray[i].indexOf('facebook.com/') !== -1) {
                chrome.tabs.create({
                    url: 'https://m.facebook.com/search/top/?q='+ $scope.linkArray[i].split('/')[3].split('?')[0],
                    active: false
                }, function () {

                });
                $scope.searchingUserList.push($scope.linkArray[i].split('facebook.com/')[1].split('?')[0]);
            }

            if (($scope.linkArray[i][0] == 0 || $scope.linkArray[i][0] == 1 || $scope.linkArray[i][0] == 9) && ($scope.linkArray[i].length == 9 || $scope.linkArray[i].length == 10 || $scope.linkArray[i].length == 11)) {
                chrome.tabs.create({
                    url: 'https://m.facebook.com/search/top/?q='+ $scope.linkArray[i],
                    active: false
                }, function () {

                });
                $scope.searchingUserList.push($scope.linkArray[i]);
            }

        }


    };

    $scope.deleteUser = function (x) {

        var r = confirm("Are you sure to delete ?");
        if (r == true) {
            if (x.likedPages && x.likedPages.length) {
                $scope.letRanking = true;
            } else {
                $scope.letRanking = false;
            }

            $scope.userToScan.$remove(x).then(function (ref) {
                $mdToast.show(
                    $mdToast.simple()
                        .textContent('Delete success!!!')
                        .hideDelay(2000)
                );
            });
        }
    };

    //Delete All
    $scope.deleteAll = function () {
        var r = confirm("Deleted all?");
        if (r == true) {
            $scope.selected.forEach(function (id) {
                var itemRef = firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + id);
                itemRef.remove();
            });
            $mdToast.show(
                $mdToast.simple()
                    .textContent('Delete success!!!')
                    .hideDelay(2000)
            );
        }
    };

    //Selected items
    $scope.selected = [];
    $scope.toggle = function (item, list) {

        for(var i = 0; i < list.length; i++){
            if(list[i].$id == item.$id){
                return list.splice(i, 1);
            }
        }

        console.log(1);
        list.push({$id: item.$id, scaned: item.scaned});
    };

    $scope.exists = function (item, list) {

        for(var i = 0; i < list.length; i++){
            if(list[i].$id == item.$id){
                return true;
            }
        }

        return false;
    };

    $scope.isIndeterminate = function () {
        return ($scope.selected.length !== 0 &&
        $scope.selected.length !== $scope.userToScan.length);
    };

    $scope.isChecked = function () {
        return $scope.selected.length === $scope.userToScan.length;
    };

    $scope.toggleAll = function () {
        if ($scope.selected.length === $scope.userToScan.length) {
            $scope.selected = [];
        } else if ($scope.selected.length === 0 || $scope.selected.length > 0) {
            $scope.selected = $scope.userToScan.map(function (item) {
                return {$id: item.$id, scaned: item.scaned};
            });
        }
    };

    chrome.runtime.onMessage.addListener(
        function (request, sender, sendResponse) {

            //getUserId
            if (request.title == 'getMyId') {
                if ($scope.searchingUserList.indexOf(request.data.searching) !== -1) {

                    $scope.letRanking = false;

                    firebase.database().ref().child('data/' + $scope.auth.uid).update({
                        token: $scope.token
                    });

                    firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + request.data.userId).update({
                        displayName: request.data.displayName,
                        username: request.data.username
                    }, function (error) {
                        if (error) {
                            console.log("Data could not be saved." + error);
                        } else {
                            chrome.tabs.remove(sender.tab.id, function () {
                            });

                            $scope.$apply(function () {
                                $scope.userLinks = '';
                            });

                        }
                    });
                }

                sendResponse({title: 'getMyIdDone'});
            }

            //scan liked pages
            if (request.title == 'activeMe') {
                chrome.tabs.update(sender.tab.id, {active: true}, function () {
                });
                sendResponse({title: 'activeDone'});
            }

            var timeout;
            //scan liked pages
            if (request.title == 'pagesScaned') {

                $scope.letRanking = true;

                firebase.database().ref().child('data/' + $scope.auth.uid).update({
                    token: $scope.token
                });

                firebase.database().ref().child('data/' + $scope.auth.uid + '/userToScan/' + request.data.userId).update({likedPages: request.data.likedPages}, function (error) {
                    if (error) {
                        console.log("Data could not be saved." + error);
                    } else {
                        chrome.tabs.remove(sender.tab.id, function () {
                        });
                    }
                });

                //debounce
                $timeout.cancel(timeout); //cancel the last timeout
                timeout = $timeout(function () {
                    $scope.ranking();
                }, 2000);
            }

        });


}]);
